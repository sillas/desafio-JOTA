Transform: AWS::Serverless-2016-10-31

Parameters:
  Owner:
    Type: String
    Default: Juser
    Description: 'Owner name'
  
  Project:
    Type: String
    Default: JNewsClassifier
    Description: 'Project name'

  Environment:
    Type: String
    Default: Dev
    AllowedValues: [Dev, Staging, Prod]
    Description: 'Environment name'
  
  RetentionDays:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 365
    Description: 'Log retention in days'

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: !Ref Environment
      DefinitionBody:
        openapi: '3.0.1'
        info: 
          description: "Created by Me"
          version: "2025-07-14T10:44:15Z"
          title: "webhook"
        paths:
          /webhook:
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaValidation.Arn}/invocations
              responses: 
                '200':
                  description: 'Success'
              security:
                - api_key: []
        components:
          securitySchemes:
            api_key:
              type: apiKey
              name: x-api-key
              in: header
      EndpointConfiguration:
        Type: REGIONAL
      Tags:
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-ApiKey
      Enabled: true
      StageKeys:
        - RestApiId: !Ref Api
          StageName: !Ref Environment
      Tags:
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner
  
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-UsagePlan
      ApiStages:
        - ApiId: !Ref Api
          Stage: !Ref Environment
      Throttle:
        RateLimit: 2 # TODO: Alterar para produção
        BurstLimit: 3 # TODO: Alterar para produção

  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  LambdaValidation:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: LambdaValidation
      Layers:
          - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:19
      MemorySize: 128 # TODO: ajustar após os testes
      Timeout: 10 # TODO: ajustar após os testes
      ReservedConcurrentExecutions: 2 # TODO: Alterar para produção 
      Events:
        ApiPOSTwebhook:
          Type: Api
          Properties:
            Path: /webhook
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          QUEUE_URL: !Ref Queue
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sqs:SendMessage
              Resource: !GetAtt Queue.Arn
      CodeUri: ../src/lambdas/validation
      Handler: index.handler
      Runtime: python3.12
      Architectures:
        - arm64
      Tags:
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner

  LambdaValidationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaValidation}
      RetentionInDays: !Ref RetentionDays
  
  LambdaClassification:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: LambdaClassification
      Layers:
          - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:19
          - !Ref NumpyLayer
          - !Ref SpacyLayer
      MemorySize: 128 # TODO: ajustar após os testes
      Timeout: 10 # TODO: ajustar após os testes
      ReservedConcurrentExecutions: 2 # TODO: Alterar para produção 
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 10 # TODO: Alterar para produção 
            MaximumBatchingWindowInSeconds: 30 # TODO: Alterar para produção 
            ScalingConfig:
              MaximumConcurrency: 2 # TODO: Alterar para produção 
      Environment:
        Variables:
          TABLE_NAME: !Ref NewsDataTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt NewsDataTable.Arn
      CodeUri: ../src/lambdas/classification
      Handler: index.handler
      Runtime: python3.12
      Architectures:
        - arm64
      Tags:
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner

  LambdaClassificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaClassification}
      RetentionInDays: !Ref RetentionDays
  
  NewsDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: processed_news
      AttributeDefinitions:
        - AttributeName: status
          AttributeType: S
        - AttributeName: uuid
          AttributeType: 'S'
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: status
          KeyType: HASH
        - AttributeName: uuid
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600 # 4 dias
      ReceiveMessageWaitTimeSeconds: 20
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
  
  NumpyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: NumpyLayer
      Description: Camada para o Numpy
      ContentUri: ../src/layers/numpy/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
  
  SpacyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SpacyLayer
      Description: Camada para o Spacy customizado
      ContentUri: ../src/layers/spacy_custom/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Dev"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  QueueUrl:
    Description: SQS Queue URL
    Value: !Ref Queue
    Export:
      Name: !Sub "${AWS::StackName}-QueueUrl"